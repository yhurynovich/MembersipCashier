#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MembershipCashierDL.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MembershipCashier")]
	public partial class MembershipCashierEntitiesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserProfileVsLocation(UserProfileVsLocation instance);
    partial void UpdateUserProfileVsLocation(UserProfileVsLocation instance);
    partial void DeleteUserProfileVsLocation(UserProfileVsLocation instance);
    partial void InsertOwner(Owner instance);
    partial void UpdateOwner(Owner instance);
    partial void DeleteOwner(Owner instance);
    partial void InsertUserProfileAudit(UserProfileAudit instance);
    partial void UpdateUserProfileAudit(UserProfileAudit instance);
    partial void DeleteUserProfileAudit(UserProfileAudit instance);
    partial void InsertProductVsLocation(ProductVsLocation instance);
    partial void UpdateProductVsLocation(ProductVsLocation instance);
    partial void DeleteProductVsLocation(ProductVsLocation instance);
    partial void InsertProductPriceHistory(ProductPriceHistory instance);
    partial void UpdateProductPriceHistory(ProductPriceHistory instance);
    partial void DeleteProductPriceHistory(ProductPriceHistory instance);
    partial void Insertwebpages_UsersInRole(webpages_UsersInRole instance);
    partial void Updatewebpages_UsersInRole(webpages_UsersInRole instance);
    partial void Deletewebpages_UsersInRole(webpages_UsersInRole instance);
    partial void Insertwebpages_Role(webpages_Role instance);
    partial void Updatewebpages_Role(webpages_Role instance);
    partial void Deletewebpages_Role(webpages_Role instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertOwnerVsLocation(OwnerVsLocation instance);
    partial void UpdateOwnerVsLocation(OwnerVsLocation instance);
    partial void DeleteOwnerVsLocation(OwnerVsLocation instance);
    partial void InsertProfileCredit(ProfileCredit instance);
    partial void UpdateProfileCredit(ProfileCredit instance);
    partial void DeleteProfileCredit(ProfileCredit instance);
    partial void InsertCreditTransaction(CreditTransaction instance);
    partial void UpdateCreditTransaction(CreditTransaction instance);
    partial void DeleteCreditTransaction(CreditTransaction instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertSquareCard(SquareCard instance);
    partial void UpdateSquareCard(SquareCard instance);
    partial void DeleteSquareCard(SquareCard instance);
    partial void InsertSquareUserProfile(SquareUserProfile instance);
    partial void UpdateSquareUserProfile(SquareUserProfile instance);
    partial void DeleteSquareUserProfile(SquareUserProfile instance);
    #endregion
		
		public MembershipCashierEntitiesDataContext() : 
				base(global::MembershipCashierDL.Properties.Settings.Default.MembershipCashierConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MembershipCashierEntitiesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MembershipCashierEntitiesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MembershipCashierEntitiesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MembershipCashierEntitiesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserProfileVsLocation> UserProfileVsLocations
		{
			get
			{
				return this.GetTable<UserProfileVsLocation>();
			}
		}
		
		public System.Data.Linq.Table<Owner> Owners
		{
			get
			{
				return this.GetTable<Owner>();
			}
		}
		
		public System.Data.Linq.Table<UserProfileAudit> UserProfileAudits
		{
			get
			{
				return this.GetTable<UserProfileAudit>();
			}
		}
		
		public System.Data.Linq.Table<ProductVsLocation> ProductVsLocations
		{
			get
			{
				return this.GetTable<ProductVsLocation>();
			}
		}
		
		public System.Data.Linq.Table<ProductPriceHistory> ProductPriceHistories
		{
			get
			{
				return this.GetTable<ProductPriceHistory>();
			}
		}
		
		public System.Data.Linq.Table<webpages_UsersInRole> webpages_UsersInRoles
		{
			get
			{
				return this.GetTable<webpages_UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<webpages_Role> webpages_Roles
		{
			get
			{
				return this.GetTable<webpages_Role>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<OwnerVsLocation> OwnerVsLocations
		{
			get
			{
				return this.GetTable<OwnerVsLocation>();
			}
		}
		
		public System.Data.Linq.Table<ProfileCredit> ProfileCredits
		{
			get
			{
				return this.GetTable<ProfileCredit>();
			}
		}
		
		public System.Data.Linq.Table<CreditTransaction> CreditTransactions
		{
			get
			{
				return this.GetTable<CreditTransaction>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<SquareCard> SquareCards
		{
			get
			{
				return this.GetTable<SquareCard>();
			}
		}
		
		public System.Data.Linq.Table<SquareUserProfile> SquareUserProfiles
		{
			get
			{
				return this.GetTable<SquareUserProfile>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfileVsLocation")]
	public partial class UserProfileVsLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _LocationId;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    #endregion
		
		public UserProfileVsLocation()
		{
			this._Location = default(EntityRef<Location>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_UserProfileVsLocation", Storage="_Location", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.UserProfileVsLocations.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.UserProfileVsLocations.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfileVsLocation", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserProfileVsLocations.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserProfileVsLocations.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Owner")]
	public partial class Owner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerId;
		
		private System.Nullable<int> _OwnerUserId;
		
		private EntitySet<OwnerVsLocation> _OwnerVsLocations;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerIdChanging(int value);
    partial void OnOwnerIdChanged();
    partial void OnOwnerUserIdChanging(System.Nullable<int> value);
    partial void OnOwnerUserIdChanged();
    #endregion
		
		public Owner()
		{
			this._OwnerVsLocations = new EntitySet<OwnerVsLocation>(new Action<OwnerVsLocation>(this.attach_OwnerVsLocations), new Action<OwnerVsLocation>(this.detach_OwnerVsLocations));
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OwnerId
		{
			get
			{
				return this._OwnerId;
			}
			set
			{
				if ((this._OwnerId != value))
				{
					this.OnOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerId = value;
					this.SendPropertyChanged("OwnerId");
					this.OnOwnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerUserId", DbType="Int")]
		public System.Nullable<int> OwnerUserId
		{
			get
			{
				return this._OwnerUserId;
			}
			set
			{
				if ((this._OwnerUserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserId = value;
					this.SendPropertyChanged("OwnerUserId");
					this.OnOwnerUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_OwnerVsLocation", Storage="_OwnerVsLocations", ThisKey="OwnerId", OtherKey="OwnerId")]
		public EntitySet<OwnerVsLocation> OwnerVsLocations
		{
			get
			{
				return this._OwnerVsLocations;
			}
			set
			{
				this._OwnerVsLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Owner", Storage="_UserProfile", ThisKey="OwnerUserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.Owners.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.Owners.Add(this);
						this._OwnerUserId = value.UserId;
					}
					else
					{
						this._OwnerUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OwnerVsLocations(OwnerVsLocation entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_OwnerVsLocations(OwnerVsLocation entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfileAudit")]
	public partial class UserProfileAudit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuditId;
		
		private int _ModifiedBy;
		
		private System.DateTime _ModificationTime;
		
		private byte _Action;
		
		private int _UserId;
		
		private byte _UserStatusId;
		
		private string _UserName;
		
		private string _EmailId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntityRef<UserProfile> _UserProfile1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditIdChanging(int value);
    partial void OnAuditIdChanged();
    partial void OnModifiedByChanging(int value);
    partial void OnModifiedByChanged();
    partial void OnModificationTimeChanging(System.DateTime value);
    partial void OnModificationTimeChanged();
    partial void OnActionChanging(byte value);
    partial void OnActionChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserStatusIdChanging(byte value);
    partial void OnUserStatusIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailIdChanging(string value);
    partial void OnEmailIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public UserProfileAudit()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			this._UserProfile1 = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuditId
		{
			get
			{
				return this._AuditId;
			}
			set
			{
				if ((this._AuditId != value))
				{
					this.OnAuditIdChanging(value);
					this.SendPropertyChanging();
					this._AuditId = value;
					this.SendPropertyChanged("AuditId");
					this.OnAuditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int NOT NULL")]
		public int ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModificationTime", DbType="DateTime NOT NULL")]
		public System.DateTime ModificationTime
		{
			get
			{
				return this._ModificationTime;
			}
			set
			{
				if ((this._ModificationTime != value))
				{
					this.OnModificationTimeChanging(value);
					this.SendPropertyChanging();
					this._ModificationTime = value;
					this.SendPropertyChanged("ModificationTime");
					this.OnModificationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="TinyInt NOT NULL")]
		public byte Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserStatusId", DbType="TinyInt NOT NULL")]
		public byte UserStatusId
		{
			get
			{
				return this._UserStatusId;
			}
			set
			{
				if ((this._UserStatusId != value))
				{
					this.OnUserStatusIdChanging(value);
					this.SendPropertyChanging();
					this._UserStatusId = value;
					this.SendPropertyChanged("UserStatusId");
					this.OnUserStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(56) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailId", DbType="VarChar(70)")]
		public string EmailId
		{
			get
			{
				return this._EmailId;
			}
			set
			{
				if ((this._EmailId != value))
				{
					this.OnEmailIdChanging(value);
					this.SendPropertyChanging();
					this._EmailId = value;
					this.SendPropertyChanged("EmailId");
					this.OnEmailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(35)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(35)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfileAudit", Storage="_UserProfile", ThisKey="ModifiedBy", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.UserProfileAudits.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.UserProfileAudits.Add(this);
						this._ModifiedBy = value.UserId;
					}
					else
					{
						this._ModifiedBy = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfileAudit1", Storage="_UserProfile1", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile1
		{
			get
			{
				return this._UserProfile1.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile1.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile1.Entity = null;
						previousValue.UserProfileAudits1.Remove(this);
					}
					this._UserProfile1.Entity = value;
					if ((value != null))
					{
						value.UserProfileAudits1.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductVsLocation")]
	public partial class ProductVsLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private int _LocationId;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    #endregion
		
		public ProductVsLocation()
		{
			this._Location = default(EntityRef<Location>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ProductVsLocation", Storage="_Location", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.ProductVsLocations.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.ProductVsLocations.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductVsLocation", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductVsLocations.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductVsLocations.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductPriceHistory")]
	public partial class ProductPriceHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private System.DateTime _ChangeDate;
		
		private decimal _Price;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnChangeDateChanging(System.DateTime value);
    partial void OnChangeDateChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public ProductPriceHistory()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductPriceHistory", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductPriceHistories.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductPriceHistories.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_UsersInRoles")]
	public partial class webpages_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _RoleId;
		
		private EntityRef<webpages_Role> _webpages_Role;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public webpages_UsersInRole()
		{
			this._webpages_Role = default(EntityRef<webpages_Role>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._webpages_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="webpages_Role_webpages_UsersInRole", Storage="_webpages_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public webpages_Role webpages_Role
		{
			get
			{
				return this._webpages_Role.Entity;
			}
			set
			{
				webpages_Role previousValue = this._webpages_Role.Entity;
				if (((previousValue != value) 
							|| (this._webpages_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._webpages_Role.Entity = null;
						previousValue.webpages_UsersInRoles.Remove(this);
					}
					this._webpages_Role.Entity = value;
					if ((value != null))
					{
						value.webpages_UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("webpages_Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_webpages_UsersInRole", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.webpages_UsersInRoles.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.webpages_UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_Roles")]
	public partial class webpages_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _RoleName;
		
		private EntitySet<webpages_UsersInRole> _webpages_UsersInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public webpages_Role()
		{
			this._webpages_UsersInRoles = new EntitySet<webpages_UsersInRole>(new Action<webpages_UsersInRole>(this.attach_webpages_UsersInRoles), new Action<webpages_UsersInRole>(this.detach_webpages_UsersInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="webpages_Role_webpages_UsersInRole", Storage="_webpages_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<webpages_UsersInRole> webpages_UsersInRoles
		{
			get
			{
				return this._webpages_UsersInRoles;
			}
			set
			{
				this._webpages_UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.webpages_Role = this;
		}
		
		private void detach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.webpages_Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AddressId;
		
		private string _Address1;
		
		private string _PostalCode;
		
		private string _City;
		
		private string _Province;
		
		private string _ProvinceName;
		
		private string _Country;
		
		private System.Nullable<bool> _IsResidential;
		
		private byte _ValidityLevel;
		
		private System.Nullable<System.DateTime> _ValidatedTime;
		
		private EntitySet<Location> _Locations;
		
		private EntitySet<UserProfile> _UserProfiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(long value);
    partial void OnAddressIdChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnProvinceNameChanging(string value);
    partial void OnProvinceNameChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnIsResidentialChanging(System.Nullable<bool> value);
    partial void OnIsResidentialChanged();
    partial void OnValidityLevelChanging(byte value);
    partial void OnValidityLevelChanged();
    partial void OnValidatedTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnValidatedTimeChanged();
    #endregion
		
		public Address()
		{
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._UserProfiles = new EntitySet<UserProfile>(new Action<UserProfile>(this.attach_UserProfiles), new Action<UserProfile>(this.detach_UserProfiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Address", Storage="_Address1", DbType="NVarChar(100)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="VarChar(9)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(35)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Province", DbType="Char(2)")]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceName", DbType="NVarChar(50)")]
		public string ProvinceName
		{
			get
			{
				return this._ProvinceName;
			}
			set
			{
				if ((this._ProvinceName != value))
				{
					this.OnProvinceNameChanging(value);
					this.SendPropertyChanging();
					this._ProvinceName = value;
					this.SendPropertyChanged("ProvinceName");
					this.OnProvinceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(2)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsResidential", DbType="Bit")]
		public System.Nullable<bool> IsResidential
		{
			get
			{
				return this._IsResidential;
			}
			set
			{
				if ((this._IsResidential != value))
				{
					this.OnIsResidentialChanging(value);
					this.SendPropertyChanging();
					this._IsResidential = value;
					this.SendPropertyChanged("IsResidential");
					this.OnIsResidentialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidityLevel", DbType="TinyInt NOT NULL")]
		public byte ValidityLevel
		{
			get
			{
				return this._ValidityLevel;
			}
			set
			{
				if ((this._ValidityLevel != value))
				{
					this.OnValidityLevelChanging(value);
					this.SendPropertyChanging();
					this._ValidityLevel = value;
					this.SendPropertyChanged("ValidityLevel");
					this.OnValidityLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidatedTime", DbType="DateTime2")]
		public System.Nullable<System.DateTime> ValidatedTime
		{
			get
			{
				return this._ValidatedTime;
			}
			set
			{
				if ((this._ValidatedTime != value))
				{
					this.OnValidatedTimeChanging(value);
					this.SendPropertyChanging();
					this._ValidatedTime = value;
					this.SendPropertyChanged("ValidatedTime");
					this.OnValidatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Location", Storage="_Locations", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_UserProfile", Storage="_UserProfiles", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<UserProfile> UserProfiles
		{
			get
			{
				return this._UserProfiles;
			}
			set
			{
				this._UserProfiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
		
		private void attach_UserProfiles(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_UserProfiles(UserProfile entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OwnerVsLocation")]
	public partial class OwnerVsLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerId;
		
		private int _LocationId;
		
		private bool _IsCurrent;
		
		private EntityRef<Owner> _Owner;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerIdChanging(int value);
    partial void OnOwnerIdChanged();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnIsCurrentChanging(bool value);
    partial void OnIsCurrentChanged();
    #endregion
		
		public OwnerVsLocation()
		{
			this._Owner = default(EntityRef<Owner>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OwnerId
		{
			get
			{
				return this._OwnerId;
			}
			set
			{
				if ((this._OwnerId != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerId = value;
					this.SendPropertyChanged("OwnerId");
					this.OnOwnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrent", DbType="Bit NOT NULL")]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_OwnerVsLocation", Storage="_Owner", ThisKey="OwnerId", OtherKey="OwnerId", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.OwnerVsLocations.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.OwnerVsLocations.Add(this);
						this._OwnerId = value.OwnerId;
					}
					else
					{
						this._OwnerId = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_OwnerVsLocation", Storage="_Location", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.OwnerVsLocations.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.OwnerVsLocations.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProfileCredits")]
	public partial class ProfileCredit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _LocationId;
		
		private int _ProductId;
		
		private decimal _BallanceUnits;
		
		private decimal _Ballance;
		
		private System.DateTime _CalculatedTime;
		
		private System.Nullable<bool> _HasBallance;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnBallanceUnitsChanging(decimal value);
    partial void OnBallanceUnitsChanged();
    partial void OnBallanceChanging(decimal value);
    partial void OnBallanceChanged();
    partial void OnCalculatedTimeChanging(System.DateTime value);
    partial void OnCalculatedTimeChanged();
    partial void OnHasBallanceChanging(System.Nullable<bool> value);
    partial void OnHasBallanceChanged();
    #endregion
		
		public ProfileCredit()
		{
			this._Location = default(EntityRef<Location>);
			this._Product = default(EntityRef<Product>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BallanceUnits", DbType="SmallMoney NOT NULL")]
		public decimal BallanceUnits
		{
			get
			{
				return this._BallanceUnits;
			}
			set
			{
				if ((this._BallanceUnits != value))
				{
					this.OnBallanceUnitsChanging(value);
					this.SendPropertyChanging();
					this._BallanceUnits = value;
					this.SendPropertyChanged("BallanceUnits");
					this.OnBallanceUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ballance", DbType="Money NOT NULL")]
		public decimal Ballance
		{
			get
			{
				return this._Ballance;
			}
			set
			{
				if ((this._Ballance != value))
				{
					this.OnBallanceChanging(value);
					this.SendPropertyChanging();
					this._Ballance = value;
					this.SendPropertyChanged("Ballance");
					this.OnBallanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculatedTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime CalculatedTime
		{
			get
			{
				return this._CalculatedTime;
			}
			set
			{
				if ((this._CalculatedTime != value))
				{
					this.OnCalculatedTimeChanging(value);
					this.SendPropertyChanging();
					this._CalculatedTime = value;
					this.SendPropertyChanged("CalculatedTime");
					this.OnCalculatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasBallance", AutoSync=AutoSync.Always, DbType="Bit", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> HasBallance
		{
			get
			{
				return this._HasBallance;
			}
			set
			{
				if ((this._HasBallance != value))
				{
					this.OnHasBallanceChanging(value);
					this.SendPropertyChanging();
					this._HasBallance = value;
					this.SendPropertyChanged("HasBallance");
					this.OnHasBallanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ProfileCredit", Storage="_Location", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.ProfileCredits.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.ProfileCredits.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProfileCredit", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProfileCredits.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProfileCredits.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_ProfileCredit", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ProfileCredits.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ProfileCredits.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CreditTransactions")]
	public partial class CreditTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private int _LocationId;
		
		private int _UserId;
		
		private int _ProductId;
		
		private System.DateTime _TransactionTime;
		
		private decimal _BallanceUnits;
		
		private string _Description;
		
		private EntitySet<Payment> _Payments;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreditTransactionIdChanging(long value);
    partial void OnCreditTransactionIdChanged();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnTransactionTimeChanging(System.DateTime value);
    partial void OnTransactionTimeChanged();
    partial void OnBallanceUnitsChanging(decimal value);
    partial void OnBallanceUnitsChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public CreditTransaction()
		{
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._Location = default(EntityRef<Location>);
			this._Product = default(EntityRef<Product>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CreditTransactionId
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnCreditTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("CreditTransactionId");
					this.OnCreditTransactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL")]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime TransactionTime
		{
			get
			{
				return this._TransactionTime;
			}
			set
			{
				if ((this._TransactionTime != value))
				{
					this.OnTransactionTimeChanging(value);
					this.SendPropertyChanging();
					this._TransactionTime = value;
					this.SendPropertyChanged("TransactionTime");
					this.OnTransactionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BallanceUnits", DbType="SmallMoney NOT NULL")]
		public decimal BallanceUnits
		{
			get
			{
				return this._BallanceUnits;
			}
			set
			{
				if ((this._BallanceUnits != value))
				{
					this.OnBallanceUnitsChanging(value);
					this.SendPropertyChanging();
					this._BallanceUnits = value;
					this.SendPropertyChanged("BallanceUnits");
					this.OnBallanceUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CreditTransaction_Payment", Storage="_Payments", ThisKey="CreditTransactionId", OtherKey="CreditTransactionId")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_CreditTransaction", Storage="_Location", ThisKey="LocationId", OtherKey="LocationId", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.CreditTransactions.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.CreditTransactions.Add(this);
						this._LocationId = value.LocationId;
					}
					else
					{
						this._LocationId = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_CreditTransaction", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.CreditTransactions.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.CreditTransactions.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_CreditTransaction", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.CreditTransactions.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.CreditTransactions.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.CreditTransaction = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.CreditTransaction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationId;
		
		private System.Nullable<long> _AddressId;
		
		private string _LocationCode;
		
		private string _Description;
		
		private string _TimeZoneCode;
		
		private bool _IsCredeitReversed;
		
		private EntitySet<UserProfileVsLocation> _UserProfileVsLocations;
		
		private EntitySet<ProductVsLocation> _ProductVsLocations;
		
		private EntitySet<OwnerVsLocation> _OwnerVsLocations;
		
		private EntitySet<ProfileCredit> _ProfileCredits;
		
		private EntitySet<CreditTransaction> _CreditTransactions;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnAddressIdChanging(System.Nullable<long> value);
    partial void OnAddressIdChanged();
    partial void OnLocationCodeChanging(string value);
    partial void OnLocationCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTimeZoneCodeChanging(string value);
    partial void OnTimeZoneCodeChanged();
    partial void OnIsCredeitReversedChanging(bool value);
    partial void OnIsCredeitReversedChanged();
    #endregion
		
		public Location()
		{
			this._UserProfileVsLocations = new EntitySet<UserProfileVsLocation>(new Action<UserProfileVsLocation>(this.attach_UserProfileVsLocations), new Action<UserProfileVsLocation>(this.detach_UserProfileVsLocations));
			this._ProductVsLocations = new EntitySet<ProductVsLocation>(new Action<ProductVsLocation>(this.attach_ProductVsLocations), new Action<ProductVsLocation>(this.detach_ProductVsLocations));
			this._OwnerVsLocations = new EntitySet<OwnerVsLocation>(new Action<OwnerVsLocation>(this.attach_OwnerVsLocations), new Action<OwnerVsLocation>(this.detach_OwnerVsLocations));
			this._ProfileCredits = new EntitySet<ProfileCredit>(new Action<ProfileCredit>(this.attach_ProfileCredits), new Action<ProfileCredit>(this.detach_ProfileCredits));
			this._CreditTransactions = new EntitySet<CreditTransaction>(new Action<CreditTransaction>(this.attach_CreditTransactions), new Action<CreditTransaction>(this.detach_CreditTransactions));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="BigInt")]
		public System.Nullable<long> AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationCode", DbType="NVarChar(8)")]
		public string LocationCode
		{
			get
			{
				return this._LocationCode;
			}
			set
			{
				if ((this._LocationCode != value))
				{
					this.OnLocationCodeChanging(value);
					this.SendPropertyChanging();
					this._LocationCode = value;
					this.SendPropertyChanged("LocationCode");
					this.OnLocationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeZoneCode", DbType="VarChar(5)")]
		public string TimeZoneCode
		{
			get
			{
				return this._TimeZoneCode;
			}
			set
			{
				if ((this._TimeZoneCode != value))
				{
					this.OnTimeZoneCodeChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneCode = value;
					this.SendPropertyChanged("TimeZoneCode");
					this.OnTimeZoneCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCredeitReversed", DbType="Bit NOT NULL")]
		public bool IsCredeitReversed
		{
			get
			{
				return this._IsCredeitReversed;
			}
			set
			{
				if ((this._IsCredeitReversed != value))
				{
					this.OnIsCredeitReversedChanging(value);
					this.SendPropertyChanging();
					this._IsCredeitReversed = value;
					this.SendPropertyChanged("IsCredeitReversed");
					this.OnIsCredeitReversedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_UserProfileVsLocation", Storage="_UserProfileVsLocations", ThisKey="LocationId", OtherKey="LocationId")]
		public EntitySet<UserProfileVsLocation> UserProfileVsLocations
		{
			get
			{
				return this._UserProfileVsLocations;
			}
			set
			{
				this._UserProfileVsLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ProductVsLocation", Storage="_ProductVsLocations", ThisKey="LocationId", OtherKey="LocationId")]
		public EntitySet<ProductVsLocation> ProductVsLocations
		{
			get
			{
				return this._ProductVsLocations;
			}
			set
			{
				this._ProductVsLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_OwnerVsLocation", Storage="_OwnerVsLocations", ThisKey="LocationId", OtherKey="LocationId")]
		public EntitySet<OwnerVsLocation> OwnerVsLocations
		{
			get
			{
				return this._OwnerVsLocations;
			}
			set
			{
				this._OwnerVsLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ProfileCredit", Storage="_ProfileCredits", ThisKey="LocationId", OtherKey="LocationId")]
		public EntitySet<ProfileCredit> ProfileCredits
		{
			get
			{
				return this._ProfileCredits;
			}
			set
			{
				this._ProfileCredits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_CreditTransaction", Storage="_CreditTransactions", ThisKey="LocationId", OtherKey="LocationId")]
		public EntitySet<CreditTransaction> CreditTransactions
		{
			get
			{
				return this._CreditTransactions;
			}
			set
			{
				this._CreditTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Location", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProfileVsLocations(UserProfileVsLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_UserProfileVsLocations(UserProfileVsLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_ProductVsLocations(ProductVsLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_ProductVsLocations(ProductVsLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_OwnerVsLocations(OwnerVsLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_OwnerVsLocations(OwnerVsLocation entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_ProfileCredits(ProfileCredit entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_ProfileCredits(ProfileCredit entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_CreditTransactions(CreditTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_CreditTransactions(CreditTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private string _Description;
		
		private EntitySet<ProductVsLocation> _ProductVsLocations;
		
		private EntitySet<ProductPriceHistory> _ProductPriceHistories;
		
		private EntitySet<ProfileCredit> _ProfileCredits;
		
		private EntitySet<CreditTransaction> _CreditTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Product()
		{
			this._ProductVsLocations = new EntitySet<ProductVsLocation>(new Action<ProductVsLocation>(this.attach_ProductVsLocations), new Action<ProductVsLocation>(this.detach_ProductVsLocations));
			this._ProductPriceHistories = new EntitySet<ProductPriceHistory>(new Action<ProductPriceHistory>(this.attach_ProductPriceHistories), new Action<ProductPriceHistory>(this.detach_ProductPriceHistories));
			this._ProfileCredits = new EntitySet<ProfileCredit>(new Action<ProfileCredit>(this.attach_ProfileCredits), new Action<ProfileCredit>(this.detach_ProfileCredits));
			this._CreditTransactions = new EntitySet<CreditTransaction>(new Action<CreditTransaction>(this.attach_CreditTransactions), new Action<CreditTransaction>(this.detach_CreditTransactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductVsLocation", Storage="_ProductVsLocations", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<ProductVsLocation> ProductVsLocations
		{
			get
			{
				return this._ProductVsLocations;
			}
			set
			{
				this._ProductVsLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductPriceHistory", Storage="_ProductPriceHistories", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<ProductPriceHistory> ProductPriceHistories
		{
			get
			{
				return this._ProductPriceHistories;
			}
			set
			{
				this._ProductPriceHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProfileCredit", Storage="_ProfileCredits", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<ProfileCredit> ProfileCredits
		{
			get
			{
				return this._ProfileCredits;
			}
			set
			{
				this._ProfileCredits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_CreditTransaction", Storage="_CreditTransactions", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<CreditTransaction> CreditTransactions
		{
			get
			{
				return this._CreditTransactions;
			}
			set
			{
				this._CreditTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductVsLocations(ProductVsLocation entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductVsLocations(ProductVsLocation entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductPriceHistories(ProductPriceHistory entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductPriceHistories(ProductPriceHistory entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProfileCredits(ProfileCredit entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProfileCredits(ProfileCredit entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_CreditTransactions(CreditTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_CreditTransactions(CreditTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CreditTransactionId;
		
		private short _Sequence;
		
		private char _PaymentMethod;
		
		private System.Nullable<decimal> _Amount;
		
		private string _Currency;
		
		private EntityRef<CreditTransaction> _CreditTransaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCreditTransactionIdChanging(long value);
    partial void OnCreditTransactionIdChanged();
    partial void OnSequenceChanging(short value);
    partial void OnSequenceChanged();
    partial void OnPaymentMethodChanging(char value);
    partial void OnPaymentMethodChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    #endregion
		
		public Payment()
		{
			this._CreditTransaction = default(EntityRef<CreditTransaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreditTransactionId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long CreditTransactionId
		{
			get
			{
				return this._CreditTransactionId;
			}
			set
			{
				if ((this._CreditTransactionId != value))
				{
					if (this._CreditTransaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreditTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._CreditTransactionId = value;
					this.SendPropertyChanged("CreditTransactionId");
					this.OnCreditTransactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethod", DbType="Char(1) NOT NULL")]
		public char PaymentMethod
		{
			get
			{
				return this._PaymentMethod;
			}
			set
			{
				if ((this._PaymentMethod != value))
				{
					this.OnPaymentMethodChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethod = value;
					this.SendPropertyChanged("PaymentMethod");
					this.OnPaymentMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="VarChar(3)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CreditTransaction_Payment", Storage="_CreditTransaction", ThisKey="CreditTransactionId", OtherKey="CreditTransactionId", IsForeignKey=true)]
		public CreditTransaction CreditTransaction
		{
			get
			{
				return this._CreditTransaction.Entity;
			}
			set
			{
				CreditTransaction previousValue = this._CreditTransaction.Entity;
				if (((previousValue != value) 
							|| (this._CreditTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreditTransaction.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._CreditTransaction.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._CreditTransactionId = value.CreditTransactionId;
					}
					else
					{
						this._CreditTransactionId = default(long);
					}
					this.SendPropertyChanged("CreditTransaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private byte _UserStatusId;
		
		private string _UserName;
		
		private string _EmailId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Photo;
		
		private string _Phone;
		
		private string _LdapAccount;
		
		private string _PersonalId;
		
		private System.Nullable<long> _AddressId;
		
		private EntitySet<UserProfileVsLocation> _UserProfileVsLocations;
		
		private EntitySet<Owner> _Owners;
		
		private EntitySet<UserProfileAudit> _UserProfileAudits;
		
		private EntitySet<UserProfileAudit> _UserProfileAudits1;
		
		private EntitySet<webpages_UsersInRole> _webpages_UsersInRoles;
		
		private EntitySet<ProfileCredit> _ProfileCredits;
		
		private EntitySet<CreditTransaction> _CreditTransactions;
		
		private EntitySet<SquareCard> _SquareCards;
		
		private EntitySet<SquareUserProfile> _SquareUserProfiles;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserStatusIdChanging(byte value);
    partial void OnUserStatusIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailIdChanging(string value);
    partial void OnEmailIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnLdapAccountChanging(string value);
    partial void OnLdapAccountChanged();
    partial void OnPersonalIdChanging(string value);
    partial void OnPersonalIdChanged();
    partial void OnAddressIdChanging(System.Nullable<long> value);
    partial void OnAddressIdChanged();
    #endregion
		
		public UserProfile()
		{
			this._UserProfileVsLocations = new EntitySet<UserProfileVsLocation>(new Action<UserProfileVsLocation>(this.attach_UserProfileVsLocations), new Action<UserProfileVsLocation>(this.detach_UserProfileVsLocations));
			this._Owners = new EntitySet<Owner>(new Action<Owner>(this.attach_Owners), new Action<Owner>(this.detach_Owners));
			this._UserProfileAudits = new EntitySet<UserProfileAudit>(new Action<UserProfileAudit>(this.attach_UserProfileAudits), new Action<UserProfileAudit>(this.detach_UserProfileAudits));
			this._UserProfileAudits1 = new EntitySet<UserProfileAudit>(new Action<UserProfileAudit>(this.attach_UserProfileAudits1), new Action<UserProfileAudit>(this.detach_UserProfileAudits1));
			this._webpages_UsersInRoles = new EntitySet<webpages_UsersInRole>(new Action<webpages_UsersInRole>(this.attach_webpages_UsersInRoles), new Action<webpages_UsersInRole>(this.detach_webpages_UsersInRoles));
			this._ProfileCredits = new EntitySet<ProfileCredit>(new Action<ProfileCredit>(this.attach_ProfileCredits), new Action<ProfileCredit>(this.detach_ProfileCredits));
			this._CreditTransactions = new EntitySet<CreditTransaction>(new Action<CreditTransaction>(this.attach_CreditTransactions), new Action<CreditTransaction>(this.detach_CreditTransactions));
			this._SquareCards = new EntitySet<SquareCard>(new Action<SquareCard>(this.attach_SquareCards), new Action<SquareCard>(this.detach_SquareCards));
			this._SquareUserProfiles = new EntitySet<SquareUserProfile>(new Action<SquareUserProfile>(this.attach_SquareUserProfiles), new Action<SquareUserProfile>(this.detach_SquareUserProfiles));
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserStatusId", DbType="TinyInt NOT NULL")]
		public byte UserStatusId
		{
			get
			{
				return this._UserStatusId;
			}
			set
			{
				if ((this._UserStatusId != value))
				{
					this.OnUserStatusIdChanging(value);
					this.SendPropertyChanging();
					this._UserStatusId = value;
					this.SendPropertyChanged("UserStatusId");
					this.OnUserStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(56) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailId", DbType="VarChar(70)")]
		public string EmailId
		{
			get
			{
				return this._EmailId;
			}
			set
			{
				if ((this._EmailId != value))
				{
					this.OnEmailIdChanging(value);
					this.SendPropertyChanging();
					this._EmailId = value;
					this.SendPropertyChanged("EmailId");
					this.OnEmailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(35)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(35)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarChar(MAX)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LdapAccount", DbType="VarChar(300)")]
		public string LdapAccount
		{
			get
			{
				return this._LdapAccount;
			}
			set
			{
				if ((this._LdapAccount != value))
				{
					this.OnLdapAccountChanging(value);
					this.SendPropertyChanging();
					this._LdapAccount = value;
					this.SendPropertyChanged("LdapAccount");
					this.OnLdapAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalId", DbType="VarChar(50)")]
		public string PersonalId
		{
			get
			{
				return this._PersonalId;
			}
			set
			{
				if ((this._PersonalId != value))
				{
					this.OnPersonalIdChanging(value);
					this.SendPropertyChanging();
					this._PersonalId = value;
					this.SendPropertyChanged("PersonalId");
					this.OnPersonalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="BigInt")]
		public System.Nullable<long> AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfileVsLocation", Storage="_UserProfileVsLocations", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserProfileVsLocation> UserProfileVsLocations
		{
			get
			{
				return this._UserProfileVsLocations;
			}
			set
			{
				this._UserProfileVsLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_Owner", Storage="_Owners", ThisKey="UserId", OtherKey="OwnerUserId")]
		public EntitySet<Owner> Owners
		{
			get
			{
				return this._Owners;
			}
			set
			{
				this._Owners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfileAudit", Storage="_UserProfileAudits", ThisKey="UserId", OtherKey="ModifiedBy")]
		public EntitySet<UserProfileAudit> UserProfileAudits
		{
			get
			{
				return this._UserProfileAudits;
			}
			set
			{
				this._UserProfileAudits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_UserProfileAudit1", Storage="_UserProfileAudits1", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserProfileAudit> UserProfileAudits1
		{
			get
			{
				return this._UserProfileAudits1;
			}
			set
			{
				this._UserProfileAudits1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_webpages_UsersInRole", Storage="_webpages_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<webpages_UsersInRole> webpages_UsersInRoles
		{
			get
			{
				return this._webpages_UsersInRoles;
			}
			set
			{
				this._webpages_UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_ProfileCredit", Storage="_ProfileCredits", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ProfileCredit> ProfileCredits
		{
			get
			{
				return this._ProfileCredits;
			}
			set
			{
				this._ProfileCredits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_CreditTransaction", Storage="_CreditTransactions", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<CreditTransaction> CreditTransactions
		{
			get
			{
				return this._CreditTransactions;
			}
			set
			{
				this._CreditTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_SquareCard", Storage="_SquareCards", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<SquareCard> SquareCards
		{
			get
			{
				return this._SquareCards;
			}
			set
			{
				this._SquareCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_SquareUserProfile", Storage="_SquareUserProfiles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<SquareUserProfile> SquareUserProfiles
		{
			get
			{
				return this._SquareUserProfiles;
			}
			set
			{
				this._SquareUserProfiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_UserProfile", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.UserProfiles.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.UserProfiles.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProfileVsLocations(UserProfileVsLocation entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_UserProfileVsLocations(UserProfileVsLocation entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_Owners(Owner entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_Owners(Owner entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_UserProfileAudits(UserProfileAudit entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_UserProfileAudits(UserProfileAudit entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_UserProfileAudits1(UserProfileAudit entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile1 = this;
		}
		
		private void detach_UserProfileAudits1(UserProfileAudit entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile1 = null;
		}
		
		private void attach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_ProfileCredits(ProfileCredit entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_ProfileCredits(ProfileCredit entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_CreditTransactions(CreditTransaction entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_CreditTransactions(CreditTransaction entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_SquareCards(SquareCard entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_SquareCards(SquareCard entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_SquareUserProfiles(SquareUserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_SquareUserProfiles(SquareUserProfile entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SquareCard")]
	public partial class SquareCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _CardNonce;
		
		private int _UserId;
		
		private System.DateTime _CreatedTime;
		
		private bool _IsCurrent;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCardNonceChanging(System.Data.Linq.Binary value);
    partial void OnCardNonceChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCreatedTimeChanging(System.DateTime value);
    partial void OnCreatedTimeChanged();
    partial void OnIsCurrentChanging(bool value);
    partial void OnIsCurrentChanged();
    #endregion
		
		public SquareCard()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNonce", DbType="VarBinary(60) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary CardNonce
		{
			get
			{
				return this._CardNonce;
			}
			set
			{
				if ((this._CardNonce != value))
				{
					this.OnCardNonceChanging(value);
					this.SendPropertyChanging();
					this._CardNonce = value;
					this.SendPropertyChanged("CardNonce");
					this.OnCardNonceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime CreatedTime
		{
			get
			{
				return this._CreatedTime;
			}
			set
			{
				if ((this._CreatedTime != value))
				{
					this.OnCreatedTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedTime = value;
					this.SendPropertyChanged("CreatedTime");
					this.OnCreatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrent", DbType="Bit NOT NULL")]
		public bool IsCurrent
		{
			get
			{
				return this._IsCurrent;
			}
			set
			{
				if ((this._IsCurrent != value))
				{
					this.OnIsCurrentChanging(value);
					this.SendPropertyChanging();
					this._IsCurrent = value;
					this.SendPropertyChanged("IsCurrent");
					this.OnIsCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_SquareCard", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.SquareCards.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.SquareCards.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SquareUserProfile")]
	public partial class SquareUserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SquareUserId;
		
		private int _UserId;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSquareUserIdChanging(string value);
    partial void OnSquareUserIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public SquareUserProfile()
		{
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SquareUserId", DbType="VarChar(60) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SquareUserId
		{
			get
			{
				return this._SquareUserId;
			}
			set
			{
				if ((this._SquareUserId != value))
				{
					this.OnSquareUserIdChanging(value);
					this.SendPropertyChanging();
					this._SquareUserId = value;
					this.SendPropertyChanged("SquareUserId");
					this.OnSquareUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_SquareUserProfile", Storage="_UserProfile", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.SquareUserProfiles.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.SquareUserProfiles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
